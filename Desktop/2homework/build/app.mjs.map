{"version":3,"sources":["../node_modules/tsup/assets/esm_shims.js","../src/app.ts","../src/routes/auth.ts","../src/models/User.ts","../src/controllers/auth.ts","../src/helpers/validation.ts","../src/session/client.ts"],"sourcesContent":["// Shim globals in esm bundle\nimport { fileURLToPath } from 'url'\nimport path from 'path'\n\nconst getFilename = () => fileURLToPath(import.meta.url)\nconst getDirname = () => path.dirname(getFilename())\n\nexport const __dirname = /* @__PURE__ */ getDirname()\nexport const __filename = /* @__PURE__ */ getFilename()\n","import \"dotenv/config\";\r\nimport path from \"path\";\r\nimport bodyParser from \"body-parser\";\r\nimport MongoStore from \"connect-mongo\";\r\nimport { Request, Response } from \"express\";\r\nimport express from \"express\";\r\nimport session from \"express-session\";\r\nimport expressLayouts from \"express-ejs-layouts\";\r\nimport mongoose from \"mongoose\";\r\nimport authController from \"./controllers/auth\";\r\nimport authRoutes from \"./routes/auth\";\r\n\r\nimport { client } from \"./session/client\";\r\nimport bearerToken from \"express-bearer-token\";\r\n\r\nconst app = express();\r\nconst port = process.env.PORT;\r\n\r\nPromise.all([\r\n  client.connect(),\r\n  mongoose.connect(\r\n    `${process.env.DB_PROTOCOL}://${process.env.DB_USER}:${process.env.DB_PASS}@${process.env.DB_HOST}/${process.env.DB_NAME}?${process.env.DB_PARAMS}`\r\n  ),\r\n])\r\n  .then(() => {\r\n    console.log(\"Connected to MongoDB\");\r\n\r\n    setupRoutes(app);\r\n\r\n    app.listen(port, () => {\r\n      console.log(\"API Listening to http://localhost:\" + port);\r\n    });\r\n  })\r\n  .catch((err) => {\r\n    console.log(\"mongose connection failed\", err);\r\n  });\r\n\r\nprocess.on(\"SIGINT\", () => {\r\n  mongoose.connection.close(() => {\r\n    console.log(\"Mongoose disconnected on app termination\");\r\n    process.exit(0);\r\n  });\r\n});\r\n\r\nfunction setupRoutes(app: express.Application) {\r\n  app.use(bearerToken());\r\n  app.use(express.static(\"public\"));\r\n  app.use(expressLayouts);\r\n  app.set(\"layout\", \"./layout\");\r\n  app.set(\"view engine\", \"ejs\");\r\n  app.set(\"views\", path.join(__dirname, \"./views\"));\r\n  app.use(bodyParser.json());\r\n  app.use(bodyParser.urlencoded({ extended: true }));\r\n\r\n  app.use(\r\n    session({\r\n      secret: \"supersecret difficult to guess string\",\r\n      cookie: {},\r\n      resave: false,\r\n      saveUninitialized: false,\r\n      store: MongoStore.create({ client: client }),\r\n    })\r\n  );\r\n\r\n  app.post(\"/logout\", (req, res) => {\r\n    req.session.destroy((err) => {\r\n      res.redirect(\"/\");\r\n    });\r\n  });\r\n\r\n  //Declare API category endpoints\r\n  app.use(\"/\", authRoutes);\r\n\r\n  //login sayfasını render edildi\r\n  app.get(\"/login\", (req, res) => {\r\n    res.render(\"login\", { title: \"About Page\" });\r\n  });\r\n\r\n  //login sayfasını render edildi\r\n  app.get(\"/register\", (req, res) => {\r\n    res.render(\"register\", { title: \"About Page\" });\r\n  });\r\n\r\n  app.use(errorHandler as any);\r\n\r\n  function errorHandler(\r\n    err: Error,\r\n    req: Request,\r\n    res: Response,\r\n    next: express.NextFunction\r\n  ) {\r\n    if (err.name === \"UnauthorizedError\") {\r\n      return res.status(401).send({\r\n        message: \"Invalid token\",\r\n      });\r\n    }\r\n\r\n    return res.status(500).send({\r\n      statusCode: 500,\r\n      message: err.message,\r\n    });\r\n  }\r\n}\r\n","import express from \"express\";\r\n\r\nimport authController from \"../controllers/auth\";\r\n\r\n// Router initialisation\r\nconst router = express.Router();\r\n\r\n// [POST] Login\r\nrouter.post(\"/login\", authController.login as any);\r\n\r\n// [POST] Register\r\nrouter.post(\"/register\", authController.register as any);\r\n\r\n// [POST] Token\r\nrouter.post(\"/token\", authController.token as any);\r\n\r\n//[GET] me\r\nrouter.get(\"/me\", authController.authorizer as any, authController.me as any);\r\n\r\n//[GET] users\r\nrouter.get(\"/users\", authController.findAllUsers as any);\r\n\r\nexport default router;\r\n","import mongoose from \"mongoose\";\r\n\r\nexport interface User {\r\n  firstName: string;\r\n  lastName: string;\r\n  username: string;\r\n  password: string;\r\n  security: {\r\n    tokens: { _id: string; refreshToken: string; createAt: Date }[];\r\n  };\r\n}\r\n\r\nconst userSchema = new mongoose.Schema<User>({\r\n  firstName: {\r\n    type: String,\r\n    required: true,\r\n    min: 3,\r\n    max: 25,\r\n  },\r\n\r\n  lastName: {\r\n    type: String,\r\n    required: true,\r\n    min: 3,\r\n    max: 25,\r\n  },\r\n\r\n  username: {\r\n    type: String,\r\n    required: true,\r\n    min: 4,\r\n    max: 25,\r\n  },\r\n  password: {\r\n    type: String,\r\n    required: true,\r\n    min: 6,\r\n    max: 255,\r\n  },\r\n  security: {\r\n    tokens: [\r\n      {\r\n        _id: String,\r\n        refreshToken: String,\r\n        createdAt: Date,\r\n      },\r\n    ],\r\n  },\r\n});\r\n\r\nexport const UserModel = mongoose.model<User>(\"User\", userSchema);\r\n","import { NextFunction, Request, Response } from \"express\";\r\nimport { User, UserModel } from \"../models/User\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport validation from \"../helpers/validation\";\r\nimport bcrypt from \"bcrypt\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport _ from \"lodash\";\r\n\r\n// Override session data type\r\ndeclare module \"express-session\" {\r\n  interface SessionData {\r\n    browserDetails: {\r\n      userAgent: undefined | string;\r\n    };\r\n\r\n    accessToken: undefined | string;\r\n  }\r\n}\r\n\r\n// Override request data type\r\ndeclare module \"express\" {\r\n  interface Request {\r\n    tokenData: {\r\n      _id: string;\r\n    };\r\n  }\r\n}\r\n\r\nconst login = async (req: Request, res: Response) => {\r\n  const { error } = validation.loginSchema.validate(req.body);\r\n\r\n  if (error) {\r\n    return res.status(400).json({\r\n      status: 400,\r\n      message: \"INPUT_ERRORS\",\r\n      errors: error.details,\r\n      original: error._original,\r\n    });\r\n  }\r\n\r\n  const user = await UserModel.findOne({ username: req.body.username });\r\n\r\n  if (!user) {\r\n    return res.status(401).json({ message: \"incorrect username or password\" });\r\n  }\r\n\r\n  // Check if the username is correct\r\n  // Check if the password correct\r\n  const validatePassword = await bcrypt.compare(\r\n    req.body.password,\r\n    user.password\r\n  );\r\n\r\n  if (!validatePassword) {\r\n    return res.status(401).json({ message: \"incorrect username or password\" });\r\n  }\r\n\r\n  const browserDetails = { userAgent: req.headers[\"user-agent\"] };\r\n\r\n  // Generate Access & Refresh Token\r\n  const accessToken = jwt.sign(\r\n    {\r\n      _id: user.id,\r\n      browserDetails,\r\n    },\r\n    process.env.SECRET_ACCESS_TOKEN!,\r\n    { expiresIn: process.env.ACCESS_TOKEN_EXPIRY }\r\n  );\r\n  const refreshToken = jwt.sign(\r\n    {\r\n      _id: user.id,\r\n    },\r\n    process.env.SECRET_REFRESH_TOKEN!,\r\n    { expiresIn: process.env.REFRESH_TOKEN_EXPIRY }\r\n  );\r\n\r\n  await addRefreshToken(user, refreshToken);\r\n\r\n  //Tarayıcı bilgileri kaydedildi//\r\n  req.session.browserDetails = browserDetails;\r\n\r\n  res.redirect(\"/users\");\r\n};\r\n\r\nconst register = async (req: Request, res: Response) => {\r\n  const { error } = validation.registerSchema.validate(req.body, {\r\n    abortEarly: false,\r\n  });\r\n\r\n  if (error) {\r\n    return res.status(400).json({\r\n      status: 400,\r\n      message: \"INPUT_ERRORS\",\r\n      errors: error.details,\r\n      original: error._original,\r\n    });\r\n  }\r\n\r\n  // Encrypt password\r\n  const salt = await bcrypt.genSalt(10);\r\n  const hashedPassword = await bcrypt.hash(req.body.password, salt);\r\n\r\n  // Create new User instance\r\n  const user = new UserModel({\r\n    firstName: req.body.firstName,\r\n    lastName: req.body.lastName,\r\n    username: req.body.username,\r\n    password: hashedPassword,\r\n    security: {\r\n      tokens: [],\r\n    },\r\n  });\r\n\r\n  // Attempt to save the user in database\r\n  await user.save();\r\n\r\n  // Generate Access & Refresh Token\r\n  const accessToken = jwt.sign(\r\n    {\r\n      _id: user.id,\r\n      username: user.username,\r\n    },\r\n    process.env.SECRET_ACCESS_TOKEN!,\r\n    { expiresIn: process.env.ACCESS_TOKEN_EXPIRY }\r\n  );\r\n  const refreshToken = jwt.sign(\r\n    {\r\n      _id: user.id,\r\n      username: user.username,\r\n    },\r\n    process.env.SECRET_REFRESH_TOKEN!,\r\n    { expiresIn: process.env.REFRESH_TOKEN_EXPIRY }\r\n  );\r\n\r\n  // Assign the token to user and save\r\n  await UserModel.updateOne(\r\n    { username: user.username },\r\n    {\r\n      $push: {\r\n        \"security.tokens\": {\r\n          refreshToken: refreshToken,\r\n          createdAt: new Date(),\r\n        },\r\n      },\r\n    }\r\n  );\r\n\r\n  res.redirect(\"/login\");\r\n};\r\n\r\nconst token = async (req: Request, res: Response) => {\r\n  const refreshToken = req.body.refreshToken;\r\n\r\n  // Verify if the token is valid - if not, don't authorise, ask to re-authenticate\r\n  const decodeRefreshToken = jwt.verify(\r\n    refreshToken,\r\n    process.env.SECRET_REFRESH_TOKEN!\r\n  );\r\n  const user = await UserModel.findOne({\r\n    username: decodeRefreshToken.sub!,\r\n  });\r\n\r\n  if (!user) {\r\n    return res.status(401).json({ message: \"Account deleted\" });\r\n  }\r\n\r\n  const existingRefreshTokens = user.security.tokens;\r\n  const refreshTokenExists = existingRefreshTokens.some(\r\n    (token) => token.refreshToken === refreshToken\r\n  );\r\n\r\n  // Check if refresh token is in document\r\n  if (!refreshTokenExists) {\r\n    return res\r\n      .status(401)\r\n      .json({ error: { status: 401, message: \"INVALID_REFRESH_TOKEN\" } });\r\n  }\r\n\r\n  // Generate new Access Token\r\n  const accessToken = jwt.sign(\r\n    {\r\n      _id: user.id,\r\n    },\r\n    process.env.SECRET_ACCESS_TOKEN!,\r\n    { expiresIn: process.env.ACCESS_TOKEN_EXPIRY }\r\n  );\r\n\r\n  // Send new Access Token\r\n  res.status(200).json({\r\n    success: {\r\n      status: 200,\r\n      message: \"ACCESS_TOKEN_GENERATED\",\r\n      accessToken: accessToken,\r\n    },\r\n  });\r\n};\r\n\r\nconst addRefreshToken = async (user: User, refreshToken: string) => {\r\n  const existingRefreshTokens = user.security.tokens;\r\n\r\n  // Check if there less than 5\r\n  if (existingRefreshTokens.length < 5) {\r\n    await UserModel.updateOne(\r\n      { username: user.username },\r\n      {\r\n        $push: {\r\n          \"security.tokens\": {\r\n            refreshToken: refreshToken,\r\n            createdAt: new Date(),\r\n          },\r\n        },\r\n      }\r\n    );\r\n  } else {\r\n    // Otherwise, remove the last token\r\n    await UserModel.updateOne(\r\n      { username: user.username },\r\n      {\r\n        $pull: {\r\n          \"security.tokens\": {\r\n            _id: existingRefreshTokens[0]._id,\r\n          },\r\n        },\r\n      }\r\n    );\r\n\r\n    // Push the new token\r\n    await UserModel.updateOne(\r\n      { username: user.username },\r\n      {\r\n        $push: {\r\n          \"security.tokens\": {\r\n            refreshToken: refreshToken,\r\n            createdAt: new Date(),\r\n          },\r\n        },\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\nfunction authorizer(req: Request, res: Response, next: NextFunction) {\r\n  console.log(\"authorization token\", req.token);\r\n\r\n  jwt.verify(req.token!, process.env.SECRET_ACCESS_TOKEN! as any, cb as any);\r\n\r\n  function cb(\r\n    err: Error,\r\n    decoded: { _id: string; browserDetails: { userAgent: string } }\r\n  ) {\r\n    console.log(\"verify result\", { err, decoded, session: req.session });\r\n\r\n    if (err) {\r\n      return res.status(401).json({ message: err.message });\r\n    }\r\n\r\n    if (\r\n      req.session.browserDetails?.userAgent !== decoded.browserDetails.userAgent\r\n    ) {\r\n      return res.status(401).json({ message: \"Unauthorized\" });\r\n    }\r\n\r\n    req.tokenData = decoded;\r\n\r\n    next();\r\n  }\r\n}\r\n\r\nasync function me(req: Request, res: Response) {\r\n  const user = await UserModel.findOne({ _id: req.tokenData._id });\r\n\r\n  console.log(\"req.token\", req.token);\r\n\r\n  if (!user) {\r\n    return res.status(401).json({ message: \"Account deleted\" });\r\n  }\r\n\r\n  res.json(cleanUserObject(user));\r\n}\r\n\r\nasync function findAllUsers(req: Request, res: Response) {\r\n  const users = await UserModel.find({});\r\n  const cleanedUsers = users.map(cleanUserObject);\r\n\r\n  res.json(cleanedUsers);\r\n}\r\n\r\nfunction cleanUserObject(user: User) {\r\n  return _.pick(user, [\"_id\", \"username\", \"firstName\", \"lastName\"]);\r\n}\r\n\r\nexport default { login, register, token, me, authorizer, findAllUsers };\r\n","import Joi from \"joi\";\r\n\r\nconst registerSchema = Joi.object({\r\n  username: Joi.string().min(4).max(25),\r\n  password: Joi.string().min(6).max(255),\r\n  firstName: Joi.string().min(3).max(25),\r\n  lastName: Joi.string().min(3).max(25),\r\n});\r\n\r\nconst loginSchema = Joi.object({\r\n  username: Joi.string().min(4).max(25),\r\n  password: Joi.string().min(6).max(255),\r\n});\r\n\r\nexport default { registerSchema, loginSchema };\r\n","import \"dotenv/config\";\r\nimport { MongoClient } from \"mongodb\";\r\n\r\nconst mongoURL = buildMongoURL(process.env);\r\n\r\nexport const client = new MongoClient(mongoURL);\r\n\r\nfunction buildMongoURL(env: NodeJS.ProcessEnv) {\r\n  const creds = buildUserCredentials(env);\r\n  const dbProtocol = env.DB_PROTOCOL || \"mongodb\";\r\n  const srvFeatureEnabled = dbProtocol === \"mongodb+srv\";\r\n  const dbPort = srvFeatureEnabled ? \"\" : `:${env.DB_PORT}`;\r\n  const dbAddr = `${env.DB_HOST}${dbPort}`;\r\n  const dbName = env.DB_NAME;\r\n  const dbParams = buildDBParamsString(env);\r\n\r\n  return `${dbProtocol}://${creds}${dbAddr}/${dbName}${dbParams}`;\r\n}\r\n\r\nfunction buildUserCredentials(env: NodeJS.ProcessEnv) {\r\n  const user = env.DB_USER;\r\n  const pass = env.DB_PASS;\r\n\r\n  if (user && pass) {\r\n    return `${user}:${pass}@`;\r\n  } else if (user) {\r\n    return `${user}@`;\r\n  } else if (pass) {\r\n    throw new Error(\"Password provided without username\");\r\n  }\r\n\r\n  return \"\";\r\n}\r\n\r\nfunction buildDBParamsString(env: NodeJS.ProcessEnv) {\r\n  const params = env.DB_PARAMS;\r\n\r\n  if (params) {\r\n    return `?${params}`;\r\n  }\r\n\r\n  return \"\";\r\n}\r\n"],"mappings":";AACA;AACA;AAEA,IAAM,cAAc,MAAM,cAAc,YAAY;AACpD,IAAM,aAAa,MAAM,KAAK,QAAQ;AAE/B,IAAM,YAA4B;;;ACPzC;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;ACRA;;;ACAA;AAYA,IAAM,aAAa,IAAI,SAAS,OAAa;AAAA,EAC3C,WAAW;AAAA,IACT,MAAM;AAAA,IACN,UAAU;AAAA,IACV,KAAK;AAAA,IACL,KAAK;AAAA;AAAA,EAGP,UAAU;AAAA,IACR,MAAM;AAAA,IACN,UAAU;AAAA,IACV,KAAK;AAAA,IACL,KAAK;AAAA;AAAA,EAGP,UAAU;AAAA,IACR,MAAM;AAAA,IACN,UAAU;AAAA,IACV,KAAK;AAAA,IACL,KAAK;AAAA;AAAA,EAEP,UAAU;AAAA,IACR,MAAM;AAAA,IACN,UAAU;AAAA,IACV,KAAK;AAAA,IACL,KAAK;AAAA;AAAA,EAEP,UAAU;AAAA,IACR,QAAQ;AAAA,MACN;AAAA,QACE,KAAK;AAAA,QACL,cAAc;AAAA,QACd,WAAW;AAAA;AAAA;AAAA;AAAA;AAMZ,IAAM,YAAY,SAAS,MAAY,QAAQ;;;AChDtD;;;ACFA;AAEA,IAAM,iBAAiB,IAAI,OAAO;AAAA,EAChC,UAAU,IAAI,SAAS,IAAI,GAAG,IAAI;AAAA,EAClC,UAAU,IAAI,SAAS,IAAI,GAAG,IAAI;AAAA,EAClC,WAAW,IAAI,SAAS,IAAI,GAAG,IAAI;AAAA,EACnC,UAAU,IAAI,SAAS,IAAI,GAAG,IAAI;AAAA;AAGpC,IAAM,cAAc,IAAI,OAAO;AAAA,EAC7B,UAAU,IAAI,SAAS,IAAI,GAAG,IAAI;AAAA,EAClC,UAAU,IAAI,SAAS,IAAI,GAAG,IAAI;AAAA;AAGpC,IAAO,qBAAQ,EAAE,gBAAgB;;;ADVjC;AAEA;AAsBA,IAAM,QAAQ,OAAO,KAAc,QAAkB;AACnD,QAAM,EAAE,UAAU,mBAAW,YAAY,SAAS,IAAI;AAEtD,MAAI,OAAO;AACT,WAAO,IAAI,OAAO,KAAK,KAAK;AAAA,MAC1B,QAAQ;AAAA,MACR,SAAS;AAAA,MACT,QAAQ,MAAM;AAAA,MACd,UAAU,MAAM;AAAA;AAAA;AAIpB,QAAM,OAAO,MAAM,UAAU,QAAQ,EAAE,UAAU,IAAI,KAAK;AAE1D,MAAI,CAAC,MAAM;AACT,WAAO,IAAI,OAAO,KAAK,KAAK,EAAE,SAAS;AAAA;AAKzC,QAAM,mBAAmB,MAAM,OAAO,QACpC,IAAI,KAAK,UACT,KAAK;AAGP,MAAI,CAAC,kBAAkB;AACrB,WAAO,IAAI,OAAO,KAAK,KAAK,EAAE,SAAS;AAAA;AAGzC,QAAM,iBAAiB,EAAE,WAAW,IAAI,QAAQ;AAGhD,QAAM,cAAc,IAAI,KACtB;AAAA,IACE,KAAK,KAAK;AAAA,IACV;AAAA,KAEF,QAAQ,IAAI,qBACZ,EAAE,WAAW,QAAQ,IAAI;AAE3B,QAAM,eAAe,IAAI,KACvB;AAAA,IACE,KAAK,KAAK;AAAA,KAEZ,QAAQ,IAAI,sBACZ,EAAE,WAAW,QAAQ,IAAI;AAG3B,QAAM,gBAAgB,MAAM;AAG5B,MAAI,QAAQ,iBAAiB;AAE7B,MAAI,SAAS;AAAA;AAGf,IAAM,WAAW,OAAO,KAAc,QAAkB;AACtD,QAAM,EAAE,UAAU,mBAAW,eAAe,SAAS,IAAI,MAAM;AAAA,IAC7D,YAAY;AAAA;AAGd,MAAI,OAAO;AACT,WAAO,IAAI,OAAO,KAAK,KAAK;AAAA,MAC1B,QAAQ;AAAA,MACR,SAAS;AAAA,MACT,QAAQ,MAAM;AAAA,MACd,UAAU,MAAM;AAAA;AAAA;AAKpB,QAAM,OAAO,MAAM,OAAO,QAAQ;AAClC,QAAM,iBAAiB,MAAM,OAAO,KAAK,IAAI,KAAK,UAAU;AAG5D,QAAM,OAAO,IAAI,UAAU;AAAA,IACzB,WAAW,IAAI,KAAK;AAAA,IACpB,UAAU,IAAI,KAAK;AAAA,IACnB,UAAU,IAAI,KAAK;AAAA,IACnB,UAAU;AAAA,IACV,UAAU;AAAA,MACR,QAAQ;AAAA;AAAA;AAKZ,QAAM,KAAK;AAGX,QAAM,cAAc,IAAI,KACtB;AAAA,IACE,KAAK,KAAK;AAAA,IACV,UAAU,KAAK;AAAA,KAEjB,QAAQ,IAAI,qBACZ,EAAE,WAAW,QAAQ,IAAI;AAE3B,QAAM,eAAe,IAAI,KACvB;AAAA,IACE,KAAK,KAAK;AAAA,IACV,UAAU,KAAK;AAAA,KAEjB,QAAQ,IAAI,sBACZ,EAAE,WAAW,QAAQ,IAAI;AAI3B,QAAM,UAAU,UACd,EAAE,UAAU,KAAK,YACjB;AAAA,IACE,OAAO;AAAA,MACL,mBAAmB;AAAA,QACjB;AAAA,QACA,WAAW,IAAI;AAAA;AAAA;AAAA;AAMvB,MAAI,SAAS;AAAA;AAGf,IAAM,QAAQ,OAAO,KAAc,QAAkB;AACnD,QAAM,eAAe,IAAI,KAAK;AAG9B,QAAM,qBAAqB,IAAI,OAC7B,cACA,QAAQ,IAAI;AAEd,QAAM,OAAO,MAAM,UAAU,QAAQ;AAAA,IACnC,UAAU,mBAAmB;AAAA;AAG/B,MAAI,CAAC,MAAM;AACT,WAAO,IAAI,OAAO,KAAK,KAAK,EAAE,SAAS;AAAA;AAGzC,QAAM,wBAAwB,KAAK,SAAS;AAC5C,QAAM,qBAAqB,sBAAsB,KAC/C,CAAC,WAAU,OAAM,iBAAiB;AAIpC,MAAI,CAAC,oBAAoB;AACvB,WAAO,IACJ,OAAO,KACP,KAAK,EAAE,OAAO,EAAE,QAAQ,KAAK,SAAS;AAAA;AAI3C,QAAM,cAAc,IAAI,KACtB;AAAA,IACE,KAAK,KAAK;AAAA,KAEZ,QAAQ,IAAI,qBACZ,EAAE,WAAW,QAAQ,IAAI;AAI3B,MAAI,OAAO,KAAK,KAAK;AAAA,IACnB,SAAS;AAAA,MACP,QAAQ;AAAA,MACR,SAAS;AAAA,MACT;AAAA;AAAA;AAAA;AAKN,IAAM,kBAAkB,OAAO,MAAY,iBAAyB;AAClE,QAAM,wBAAwB,KAAK,SAAS;AAG5C,MAAI,sBAAsB,SAAS,GAAG;AACpC,UAAM,UAAU,UACd,EAAE,UAAU,KAAK,YACjB;AAAA,MACE,OAAO;AAAA,QACL,mBAAmB;AAAA,UACjB;AAAA,UACA,WAAW,IAAI;AAAA;AAAA;AAAA;AAAA,SAKlB;AAEL,UAAM,UAAU,UACd,EAAE,UAAU,KAAK,YACjB;AAAA,MACE,OAAO;AAAA,QACL,mBAAmB;AAAA,UACjB,KAAK,sBAAsB,GAAG;AAAA;AAAA;AAAA;AAOtC,UAAM,UAAU,UACd,EAAE,UAAU,KAAK,YACjB;AAAA,MACE,OAAO;AAAA,QACL,mBAAmB;AAAA,UACjB;AAAA,UACA,WAAW,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAQ3B,oBAAoB,KAAc,KAAe,MAAoB;AACnE,UAAQ,IAAI,uBAAuB,IAAI;AAEvC,MAAI,OAAO,IAAI,OAAQ,QAAQ,IAAI,qBAA6B;AAEhE,cACE,KACA,SACA;AAzPJ;AA0PI,YAAQ,IAAI,iBAAiB,EAAE,KAAK,SAAS,SAAS,IAAI;AAE1D,QAAI,KAAK;AACP,aAAO,IAAI,OAAO,KAAK,KAAK,EAAE,SAAS,IAAI;AAAA;AAG7C,QACE,WAAI,QAAQ,mBAAZ,mBAA4B,eAAc,QAAQ,eAAe,WACjE;AACA,aAAO,IAAI,OAAO,KAAK,KAAK,EAAE,SAAS;AAAA;AAGzC,QAAI,YAAY;AAEhB;AAAA;AAAA;AAIJ,kBAAkB,KAAc,KAAe;AAC7C,QAAM,OAAO,MAAM,UAAU,QAAQ,EAAE,KAAK,IAAI,UAAU;AAE1D,UAAQ,IAAI,aAAa,IAAI;AAE7B,MAAI,CAAC,MAAM;AACT,WAAO,IAAI,OAAO,KAAK,KAAK,EAAE,SAAS;AAAA;AAGzC,MAAI,KAAK,gBAAgB;AAAA;AAG3B,4BAA4B,KAAc,KAAe;AACvD,QAAM,QAAQ,MAAM,UAAU,KAAK;AACnC,QAAM,eAAe,MAAM,IAAI;AAE/B,MAAI,KAAK;AAAA;AAGX,yBAAyB,MAAY;AACnC,SAAO,EAAE,KAAK,MAAM,CAAC,OAAO,YAAY,aAAa;AAAA;AAGvD,IAAO,eAAQ,EAAE,OAAO,UAAU,OAAO,IAAI,YAAY;;;AF9RzD,IAAM,SAAS,QAAQ;AAGvB,OAAO,KAAK,UAAU,aAAe;AAGrC,OAAO,KAAK,aAAa,aAAe;AAGxC,OAAO,KAAK,UAAU,aAAe;AAGrC,OAAO,IAAI,OAAO,aAAe,YAAmB,aAAe;AAGnE,OAAO,IAAI,UAAU,aAAe;AAEpC,IAAO,gBAAQ;;;AItBf;AACA;AAEA,IAAM,WAAW,cAAc,QAAQ;AAEhC,IAAM,SAAS,IAAI,YAAY;AAEtC,uBAAuB,KAAwB;AAC7C,QAAM,QAAQ,qBAAqB;AACnC,QAAM,aAAa,IAAI,eAAe;AACtC,QAAM,oBAAoB,eAAe;AACzC,QAAM,SAAS,oBAAoB,KAAK,IAAI,IAAI;AAChD,QAAM,SAAS,GAAG,IAAI,UAAU;AAChC,QAAM,SAAS,IAAI;AACnB,QAAM,WAAW,oBAAoB;AAErC,SAAO,GAAG,gBAAgB,QAAQ,UAAU,SAAS;AAAA;AAGvD,8BAA8B,KAAwB;AACpD,QAAM,OAAO,IAAI;AACjB,QAAM,OAAO,IAAI;AAEjB,MAAI,QAAQ,MAAM;AAChB,WAAO,GAAG,QAAQ;AAAA,aACT,MAAM;AACf,WAAO,GAAG;AAAA,aACD,MAAM;AACf,UAAM,IAAI,MAAM;AAAA;AAGlB,SAAO;AAAA;AAGT,6BAA6B,KAAwB;AACnD,QAAM,SAAS,IAAI;AAEnB,MAAI,QAAQ;AACV,WAAO,IAAI;AAAA;AAGb,SAAO;AAAA;;;AL5BT;AAEA,IAAM,MAAM;AACZ,IAAM,OAAO,QAAQ,IAAI;AAEzB,QAAQ,IAAI;AAAA,EACV,OAAO;AAAA,EACP,UAAS,QACP,GAAG,QAAQ,IAAI,iBAAiB,QAAQ,IAAI,WAAW,QAAQ,IAAI,WAAW,QAAQ,IAAI,WAAW,QAAQ,IAAI,WAAW,QAAQ,IAAI;AAAA,GAGzI,KAAK,MAAM;AACV,UAAQ,IAAI;AAEZ,cAAY;AAEZ,MAAI,OAAO,MAAM,MAAM;AACrB,YAAQ,IAAI,uCAAuC;AAAA;AAAA,GAGtD,MAAM,CAAC,QAAQ;AACd,UAAQ,IAAI,6BAA6B;AAAA;AAG7C,QAAQ,GAAG,UAAU,MAAM;AACzB,YAAS,WAAW,MAAM,MAAM;AAC9B,YAAQ,IAAI;AACZ,YAAQ,KAAK;AAAA;AAAA;AAIjB,qBAAqB,MAA0B;AAC7C,OAAI,IAAI;AACR,OAAI,IAAI,SAAQ,OAAO;AACvB,OAAI,IAAI;AACR,OAAI,IAAI,UAAU;AAClB,OAAI,IAAI,eAAe;AACvB,OAAI,IAAI,SAAS,MAAK,KAAK,WAAW;AACtC,OAAI,IAAI,WAAW;AACnB,OAAI,IAAI,WAAW,WAAW,EAAE,UAAU;AAE1C,OAAI,IACF,QAAQ;AAAA,IACN,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,mBAAmB;AAAA,IACnB,OAAO,WAAW,OAAO,EAAE;AAAA;AAI/B,OAAI,KAAK,WAAW,CAAC,KAAK,QAAQ;AAChC,QAAI,QAAQ,QAAQ,CAAC,QAAQ;AAC3B,UAAI,SAAS;AAAA;AAAA;AAKjB,OAAI,IAAI,KAAK;AAGb,OAAI,IAAI,UAAU,CAAC,KAAK,QAAQ;AAC9B,QAAI,OAAO,SAAS,EAAE,OAAO;AAAA;AAI/B,OAAI,IAAI,aAAa,CAAC,KAAK,QAAQ;AACjC,QAAI,OAAO,YAAY,EAAE,OAAO;AAAA;AAGlC,OAAI,IAAI;AAER,wBACE,KACA,KACA,KACA,MACA;AACA,QAAI,IAAI,SAAS,qBAAqB;AACpC,aAAO,IAAI,OAAO,KAAK,KAAK;AAAA,QAC1B,SAAS;AAAA;AAAA;AAIb,WAAO,IAAI,OAAO,KAAK,KAAK;AAAA,MAC1B,YAAY;AAAA,MACZ,SAAS,IAAI;AAAA;AAAA;AAAA;","names":[]}